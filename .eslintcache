[{"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\index.js":"1","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\App.js":"2","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\AuthContext.js":"3","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\SocketContext.js":"4","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\ui\\UiContext.js":"5","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\SharedDocContext.js":"6","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\router\\AppRouter.js":"7","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\design\\DesignContext.js":"8","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\ui\\uiReducer.js":"9","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\router\\PrivateRoute.js":"10","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\router\\PublicRoute.js":"11","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\design\\designReducer.js":"12","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\UserConfigContext.js":"13","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\utils\\fetch.js":"14","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\hooks\\useSocket.js":"15","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\ConfirmationModal.js":"16","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\Footer.js":"17","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\NavBar.js":"18","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignPageReader.js":"19","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\LandingPage\\LandingPage.js":"20","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\SharedLink\\SharedLinkPage.js":"21","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\DesignPage.js":"22","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\MyDesignsPage.js":"23","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\PublicRepository\\PublicRepositoryPage.js":"24","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\SearchUsersPage\\SearchUsersPage.js":"25","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\SharedWithMe\\SharedWithMePage.js":"26","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\UserProfile\\UserProfile.js":"27","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\theme\\theme.js":"28","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\DesignsContainer.js":"29","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\UserProfile\\ShowContactsModal.js":"30","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\UserProfile\\EditProfileModal.js":"31","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\FolderModal.js":"32","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\DesignService.js":"33","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\UserService.js":"34","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\types\\index.js":"35","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\LeftPanel.js":"36","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\UserCard.js":"37","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\KeywordManager.js":"38","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\CategoryService.js":"39","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\RecentDesigns.js":"40","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\FolderService.js":"41","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\DesignsBreadcrumbs.js":"42","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\BloomService.js":"43","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\FoldersContainer.js":"44","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\TabPanel.js":"45","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\utils\\textFormatters.js":"46","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\DesignMetadata.js":"47","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\DesignWorkspace.js":"48","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignReader\\DesignReader.js":"49","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\Design.js":"50","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\hooks\\useForm.js":"51","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\ResourceLinksModal.js":"52","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignReader\\LearningActivityReader.js":"53","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\ShareModal.js":"54","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\types\\design.js":"55","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\types\\ui.js":"56","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\hooks\\useHorizontalScroll.js":"57","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\DesignSkeleton.js":"58","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\DesignsFolder.js":"59","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\PieGraphic.js":"60","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\ResourceLink.js":"61","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\StackedBar.js":"62","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\PDF\\ViewAndDownloadPDFModal.js":"63","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\assets\\resource\\items.js":"64","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\SharedTextFieldTipTapEditor.js":"65","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\LearningActivity.js":"66","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\utils\\timeFormatters.js":"67","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\LearningResult.js":"68","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\LearningResultModal.js":"69","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\RightClickMenu.js":"70","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\CustomMenu.js":"71","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\PDF\\DocumentPDF.js":"72","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignReader\\TaskReader.js":"73","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\Task.js":"74","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\BloomVerbList.js":"75","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\BloomPiramid.js":"76","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\LandingPage\\RegisterModal.js":"77","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\LandingPage\\LoginModal.js":"78","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\ModalFormWithImage.js":"79","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Auth\\ResetPasswordPage.js":"80"},{"size":204,"mtime":1615407963114,"results":"81","hashOfConfig":"82"},{"size":1158,"mtime":1617321970038,"results":"83","hashOfConfig":"82"},{"size":2729,"mtime":1616077904562,"results":"84","hashOfConfig":"82"},{"size":1091,"mtime":1616077904563,"results":"85","hashOfConfig":"82"},{"size":1212,"mtime":1618880849365,"results":"86","hashOfConfig":"82"},{"size":2183,"mtime":1618880849363,"results":"87","hashOfConfig":"82"},{"size":4429,"mtime":1618955289670,"results":"88","hashOfConfig":"82"},{"size":867,"mtime":1616077904570,"results":"89","hashOfConfig":"82"},{"size":1636,"mtime":1618880849366,"results":"90","hashOfConfig":"82"},{"size":705,"mtime":1613675971297,"results":"91","hashOfConfig":"82"},{"size":651,"mtime":1613675971297,"results":"92","hashOfConfig":"82"},{"size":5129,"mtime":1618880849364,"results":"93","hashOfConfig":"82"},{"size":1380,"mtime":1616077904569,"results":"94","hashOfConfig":"82"},{"size":1331,"mtime":1616077904617,"results":"95","hashOfConfig":"82"},{"size":1199,"mtime":1616077904573,"results":"96","hashOfConfig":"82"},{"size":4083,"mtime":1618880849352,"results":"97","hashOfConfig":"82"},{"size":620,"mtime":1613675971280,"results":"98","hashOfConfig":"82"},{"size":8732,"mtime":1617321970045,"results":"99","hashOfConfig":"82"},{"size":3519,"mtime":1618880849380,"results":"100","hashOfConfig":"82"},{"size":585,"mtime":1616077904585,"results":"101","hashOfConfig":"82"},{"size":3334,"mtime":1618880849392,"results":"102","hashOfConfig":"82"},{"size":9412,"mtime":1618880849367,"results":"103","hashOfConfig":"82"},{"size":6886,"mtime":1618880849389,"results":"104","hashOfConfig":"82"},{"size":8534,"mtime":1618880849392,"results":"105","hashOfConfig":"82"},{"size":6083,"mtime":1616077904603,"results":"106","hashOfConfig":"82"},{"size":2085,"mtime":1617321970079,"results":"107","hashOfConfig":"82"},{"size":11853,"mtime":1617321970081,"results":"108","hashOfConfig":"82"},{"size":1220,"mtime":1615475518056,"results":"109","hashOfConfig":"82"},{"size":4679,"mtime":1618880849356,"results":"110","hashOfConfig":"82"},{"size":2176,"mtime":1616077904605,"results":"111","hashOfConfig":"82"},{"size":10266,"mtime":1617321970081,"results":"112","hashOfConfig":"82"},{"size":6216,"mtime":1618880849388,"results":"113","hashOfConfig":"82"},{"size":2843,"mtime":1618880849394,"results":"114","hashOfConfig":"82"},{"size":1357,"mtime":1617321970109,"results":"115","hashOfConfig":"82"},{"size":132,"mtime":1616077904614,"results":"116","hashOfConfig":"82"},{"size":2938,"mtime":1617321970065,"results":"117","hashOfConfig":"82"},{"size":3119,"mtime":1616077904561,"results":"118","hashOfConfig":"82"},{"size":3771,"mtime":1618880849358,"results":"119","hashOfConfig":"82"},{"size":236,"mtime":1616077904609,"results":"120","hashOfConfig":"82"},{"size":2764,"mtime":1616077904591,"results":"121","hashOfConfig":"82"},{"size":1011,"mtime":1618880849395,"results":"122","hashOfConfig":"82"},{"size":2028,"mtime":1616077904589,"results":"123","hashOfConfig":"82"},{"size":472,"mtime":1616077904608,"results":"124","hashOfConfig":"82"},{"size":960,"mtime":1618880849358,"results":"125","hashOfConfig":"82"},{"size":642,"mtime":1616077904560,"results":"126","hashOfConfig":"82"},{"size":322,"mtime":1613675971304,"results":"127","hashOfConfig":"82"},{"size":25578,"mtime":1618954650698,"results":"128","hashOfConfig":"82"},{"size":21041,"mtime":1618954650731,"results":"129","hashOfConfig":"82"},{"size":15942,"mtime":1618954650733,"results":"130","hashOfConfig":"82"},{"size":9665,"mtime":1618880849354,"results":"131","hashOfConfig":"82"},{"size":456,"mtime":1615232353723,"results":"132","hashOfConfig":"82"},{"size":4872,"mtime":1618880849376,"results":"133","hashOfConfig":"82"},{"size":6225,"mtime":1618880849381,"results":"134","hashOfConfig":"82"},{"size":12747,"mtime":1618880849377,"results":"135","hashOfConfig":"82"},{"size":767,"mtime":1618880849396,"results":"136","hashOfConfig":"82"},{"size":514,"mtime":1618880849397,"results":"137","hashOfConfig":"82"},{"size":643,"mtime":1617636090350,"results":"138","hashOfConfig":"82"},{"size":3066,"mtime":1613675971278,"results":"139","hashOfConfig":"82"},{"size":6436,"mtime":1618880849357,"results":"140","hashOfConfig":"82"},{"size":1593,"mtime":1618880849359,"results":"141","hashOfConfig":"82"},{"size":4126,"mtime":1618880849375,"results":"142","hashOfConfig":"82"},{"size":4138,"mtime":1618880849362,"results":"143","hashOfConfig":"82"},{"size":3316,"mtime":1618880849371,"results":"144","hashOfConfig":"82"},{"size":1053,"mtime":1617321970040,"results":"145","hashOfConfig":"82"},{"size":10033,"mtime":1618880849361,"results":"146","hashOfConfig":"82"},{"size":13415,"mtime":1618880849374,"results":"147","hashOfConfig":"82"},{"size":386,"mtime":1615232353740,"results":"148","hashOfConfig":"82"},{"size":2895,"mtime":1616077904578,"results":"149","hashOfConfig":"82"},{"size":5611,"mtime":1616077904578,"results":"150","hashOfConfig":"82"},{"size":2672,"mtime":1618880849360,"results":"151","hashOfConfig":"82"},{"size":2141,"mtime":1618880849353,"results":"152","hashOfConfig":"82"},{"size":14740,"mtime":1618880849370,"results":"153","hashOfConfig":"82"},{"size":8116,"mtime":1618880849383,"results":"154","hashOfConfig":"82"},{"size":23962,"mtime":1618880849379,"results":"155","hashOfConfig":"82"},{"size":1721,"mtime":1616077904576,"results":"156","hashOfConfig":"82"},{"size":2561,"mtime":1616077904575,"results":"157","hashOfConfig":"82"},{"size":8600,"mtime":1616077904587,"results":"158","hashOfConfig":"82"},{"size":8539,"mtime":1618955457123,"results":"159","hashOfConfig":"82"},{"size":2355,"mtime":1615408970056,"results":"160","hashOfConfig":"82"},{"size":10616,"mtime":1619039837512,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"espqah",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"164"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"164"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"164"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"164"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\index.js",[],["327","328"],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\App.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\AuthContext.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\SocketContext.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\ui\\UiContext.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\SharedDocContext.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\router\\AppRouter.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\design\\DesignContext.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\ui\\uiReducer.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\router\\PrivateRoute.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\router\\PublicRoute.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\design\\designReducer.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\contexts\\UserConfigContext.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\utils\\fetch.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\hooks\\useSocket.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\ConfirmationModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\Footer.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\NavBar.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignPageReader.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\LandingPage\\LandingPage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\SharedLink\\SharedLinkPage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\DesignPage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\MyDesignsPage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\PublicRepository\\PublicRepositoryPage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\SearchUsersPage\\SearchUsersPage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\SharedWithMe\\SharedWithMePage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\UserProfile\\UserProfile.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\theme\\theme.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\DesignsContainer.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\UserProfile\\ShowContactsModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\User\\UserProfile\\EditProfileModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\FolderModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\DesignService.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\UserService.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\types\\index.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\LeftPanel.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\UserCard.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\KeywordManager.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\CategoryService.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\RecentDesigns.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\FolderService.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Navigation\\MyDesigns\\DesignsBreadcrumbs.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\services\\BloomService.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\FoldersContainer.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\TabPanel.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\utils\\textFormatters.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\DesignMetadata.js",["329"],"import React, { forwardRef, useCallback, useEffect, useImperativeHandle, useRef } from 'react';\r\nimport { Button, Divider, FormControl, FormControlLabel, Grid, InputLabel, Link, makeStyles, MenuItem, Select, Switch, TextField, Typography } from '@material-ui/core'\r\nimport { useQuery } from 'react-query';\r\nimport { Alert } from '@material-ui/lab';\r\nimport { useForm } from 'hooks/useForm';\r\nimport { useSocketState } from 'contexts/SocketContext';\r\nimport TimeFormatter from 'utils/timeFormatters';\r\nimport { getCategories } from 'services/CategoryService';\r\nimport { LearningResult } from 'pages/DesignPage/Metadata/LearningResult';\r\nimport { LearningResultModal } from 'pages/DesignPage/Metadata/LearningResultModal';\r\nimport { useDesignState } from 'contexts/design/DesignContext';\r\nimport { useUiState } from 'contexts/ui/UiContext';\r\nimport types from 'types';\r\nimport { useAuthState } from 'contexts/AuthContext';\r\nimport { SharedTextFieldTipTapEditor } from 'components/SharedTextFieldTipTapEditor';\r\nimport { useSnackbar } from 'notistack';\r\nimport { KeywordManager } from 'components/KeywordManager';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    leftPanel: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        borderRight: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    workspace: {\r\n        paddingTop: 15,\r\n        paddingLeft: 30,\r\n        paddingRight: 30,\r\n        background: theme.palette.background.workSpace,\r\n        minHeight: 'calc(100vh - 64px)'\r\n    },\r\n    rightPanel: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        borderLeft: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    title: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    content: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-between',\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n    },\r\n    grid: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    category: {\r\n        width: '100%',\r\n    },\r\n    categoryPopOver: {\r\n        maxHeight: 400,\r\n    },\r\n    timeField: {\r\n        marginRight: 10,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    clickHere: {\r\n        textDecoration: 'none',\r\n        cursor: 'pointer',\r\n        '&:hover': {\r\n            textDecoration: 'underline'\r\n        }\r\n    }\r\n}));\r\n\r\nexport const DesignMetadata = forwardRef((props, ref) => {\r\n    const classes = useStyles();\r\n    const { socket/*, online*/ } = useSocketState();\r\n    const { authState } = useAuthState();\r\n    const isMounted = useRef(true);\r\n    const { uiState, dispatch } = useUiState();\r\n    const { designState } = useDesignState();\r\n    const { design } = designState;\r\n    const { metadata } = design;\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const nameRef = useRef();\r\n    const classSizeRef = useRef();\r\n    const hoursRef = useRef();\r\n    const minutesRef = useRef();\r\n    const priorKnowledgeRef = useRef();\r\n    const descriptionRef = useRef();\r\n    const objectiveRef = useRef();\r\n\r\n    const [form, handleInputChange, , setValues] = useForm({\r\n        name: metadata.name,\r\n        category: metadata.category.name ?? 'Sin categoría',\r\n        classSize: metadata.classSize,\r\n        workingTimeDesignHours: metadata.workingTimeDesign.hours ?? 0,\r\n        workingTimeDesignMinutes: metadata.workingTimeDesign.minutes ?? 0,\r\n        workingTimeHours: metadata.workingTime.hours ?? 0,\r\n        workingTimeMinutes: metadata.workingTime.minutes ?? 0,\r\n        priorKnowledge: metadata.priorKnowledge,\r\n        description: metadata.description,\r\n        objective: metadata.objective,\r\n        isPublic: metadata.isPublic,\r\n        keywords: design.keywords ?? [],\r\n    });\r\n\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            clearEditors: () => {\r\n                nameRef?.current?.clearText();\r\n                classSizeRef?.current?.clearText();\r\n                hoursRef?.current?.clearText();\r\n                minutesRef?.current?.clearText();\r\n                priorKnowledgeRef?.current?.clearText();\r\n                descriptionRef?.current?.clearText();\r\n                objectiveRef?.current?.clearText();\r\n            }\r\n        }),\r\n    );\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            isMounted.current = false;\r\n        };\r\n    }, []);\r\n\r\n    const setKeywords = useCallback(\r\n        (keywords) => {\r\n            handleInputChange({ target: { name: 'keywords', value: keywords } });\r\n        },\r\n        [handleInputChange],\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (JSON.stringify(form.keywords) !== JSON.stringify(design.keywords)) {\r\n                setKeywords([...design.keywords]);\r\n            }\r\n        }\r\n    }, [design.keywords, form.keywords, setKeywords]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.category !== metadata.category.name) {\r\n                handleInputChange({target: {name: 'category', value: metadata.category.name ?? 'Sin categoría'}});\r\n            }\r\n        }\r\n    }, [metadata.category, form.category, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.name !== metadata.name) {\r\n                handleInputChange({target: {name: 'name', value: metadata.name}});\r\n            }\r\n        }\r\n    }, [metadata.name, form.name, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.classSize !== metadata.classSize) {\r\n                handleInputChange({target: {name: 'classSize', value: metadata.classSize}});\r\n            }\r\n        }\r\n    }, [metadata.classSize, form.classSize, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.description !== metadata.description) {\r\n                handleInputChange({target: {name: 'description', value: metadata.description}});\r\n            }\r\n        }\r\n    }, [metadata.description, form.description, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.workingTimeDesignHours !== metadata.workingTimeDesign.hours) {\r\n                handleInputChange({target: {name: 'workingTimeDesignHours', value: metadata.workingTimeDesign.hours}});\r\n            }\r\n        }\r\n    }, [metadata.workingTimeDesign, form.workingTimeDesignHours, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.workingTimeDesignMinutes !== metadata.workingTimeDesign.minutes) {\r\n                handleInputChange({target: {name: 'workingTimeDesignMinutes', value: metadata.workingTimeDesign.minutes ?? 0}});\r\n            }\r\n        }\r\n    }, [metadata.workingTimeDesign, form.workingTimeDesignMinutes, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.workingTimeHours !== metadata.workingTime.hours) {\r\n                handleInputChange({target: {name: 'workingTimeHours', value: metadata.workingTime.hours ?? 0}});\r\n            }\r\n        }\r\n    }, [metadata.workingTime.hours, form.workingTimeHours, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.workingTimeMinutes !== metadata.workingTime.minutes) {\r\n                handleInputChange({target: {name: 'workingTimeMinutes', value: metadata.workingTime.minutes ?? 0}});\r\n            }\r\n        }\r\n    }, [metadata.workingTime.minutes, form.workingTimeMinutes, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.priorKnowledge !== metadata.priorKnowledge) {\r\n                handleInputChange({target: {name: 'priorKnowledge', value: metadata.priorKnowledge}});\r\n            }\r\n        }\r\n    }, [metadata.priorKnowledge, form.priorKnowledge, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.objective !== metadata.objective) {\r\n                handleInputChange({target: {name: 'objective', value: metadata.objective}});\r\n            }\r\n        }\r\n    }, [metadata.objective, form.objective, setValues, handleInputChange]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.isPublic !== metadata.isPublic) {\r\n                handleInputChange({target: {name: 'isPublic', value: metadata.isPublic}});\r\n            }\r\n        }\r\n    }, [metadata.isPublic, form.isPublic, setValues, handleInputChange]);\r\n\r\n    const { name, category, classSize, workingTimeDesignHours, workingTimeDesignMinutes, workingTimeHours, workingTimeMinutes, priorKnowledge, description, objective, isPublic, keywords } = form;\r\n\r\n    const { isLoading, isError, data, error } = useQuery('categories', async () => {\r\n        return await getCategories();\r\n    }, { refetchOnWindowFocus: false });\r\n\r\n    if (isError) {\r\n        return (<Typography>{error.message}</Typography>);\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (<Typography>Cargando...</Typography>);\r\n    }\r\n\r\n    const createCategoryList = () => {\r\n        if (data == null || data.categories.length === 0) return (<MenuItem value='Sin categoría'>Sin categoría</MenuItem>);\r\n        return data.categories.map(c => <MenuItem key={c._id} value={c.name}>{c.name}</MenuItem>);\r\n    };\r\n\r\n    const handleChangeMetadataField = ({ target }) => {\r\n        let { name: field, value } = target;\r\n        value = (target.type === 'number' && !isNaN(target.value)) ? parseInt(target.value) : (target.type === 'checkbox') ? target.checked : target.value;\r\n        let e = { target: { name: target.name, value } };\r\n        let subfield = null;\r\n        switch (field) {\r\n            case 'workingTimeHours':\r\n                field = 'workingTime';\r\n                subfield = 'hours';\r\n                value = isNaN(value) ? 0 : value;\r\n                break;\r\n            case 'workingTimeMinutes':\r\n                field = 'workingTime';\r\n                subfield = 'minutes';\r\n                value = isNaN(value) ? 0 : value;\r\n                break;\r\n            case 'category':\r\n                value = data.categories.find(c => c.name === value);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        socket.emit('edit-metadata-field', { designId: design._id, field, value, subfield });\r\n        if(subfield){\r\n            if (design.metadata[field][subfield].toString() !== value.toString()) handleInputChange(e);\r\n        } else {\r\n            if (design.metadata[field].toString() !== value.toString()) handleInputChange(e);\r\n        }\r\n        \r\n    };\r\n\r\n    const handleSaveDesign = (e) => {\r\n        socket.emit('save-design', { designId: design._id });\r\n        enqueueSnackbar('Su diseño se ha guardado correctamente', { variant: 'success', autoHideDuration: 2000 });\r\n    };\r\n\r\n    const handleOpenLearningResultmodal = () => dispatch({\r\n        type: types.ui.toggleModal,\r\n        payload: 'LearningResult',\r\n    });\r\n\r\n    const handleChangeKeywords = (keywords, type, targetKeyword) => {\r\n        if (type === 'add') socket.emit('add-design-keyword', { designId: design._id, keyword: targetKeyword });\r\n        else if (type === 'remove') socket.emit('remove-design-keyword', { designId: design._id, keyword: targetKeyword });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Grid container key={design._id}>\r\n                <Grid item xs={12} md={3} lg={2} className={classes.leftPanel}></Grid>\r\n                <Grid item xs={12} md={6} lg={8} className={classes.workspace}>\r\n                    <div className={classes.title}>\r\n                        <Typography variant='h4'>Información Diseño</Typography>\r\n                        <Button variant='outlined' color='default' onClick={handleSaveDesign}>Guardar Información</Button>\r\n                    </div>\r\n                    <Divider />\r\n                    <Grid container spacing={3} className={classes.content}>\r\n                        <Grid item className={classes.grid} xs={12} sm={9}  >\r\n                            <TextField\r\n                                label='Nombre'\r\n                                fullWidth\r\n                                margin='none'\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                InputProps={{\r\n                                    inputComponent: SharedTextFieldTipTapEditor,\r\n                                    inputProps: {\r\n                                        ref: nameRef,\r\n                                        name: 'name',\r\n                                        placeholder: 'Nombre',\r\n                                        initialvalue: name,\r\n                                        onChange: handleChangeMetadataField,\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12} sm={3}>\r\n                            <div>\r\n                                <Typography variant='body2'>Visibilidad</Typography>\r\n                                <FormControlLabel\r\n                                    control={<Switch\r\n                                        name='isPublic'\r\n                                        checked={isPublic}\r\n                                        onChange={handleChangeMetadataField}\r\n                                        disabled={!(design.owner === authState.user.uid)}\r\n                                    />}\r\n                                    label={isPublic ? 'Público' : 'Privado'}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12} md={12} lg={6}>\r\n                            <FormControl className={classes.category} variant='outlined' >\r\n                                <InputLabel id=\"category-label\">Categoría</InputLabel>\r\n                                <Select\r\n                                    labelId=\"category-label\"\r\n                                    name='category'\r\n                                    label='Categoría'\r\n                                    value={category}\r\n                                    onChange={handleChangeMetadataField}\r\n                                    MenuProps={{ classes: { paper: classes.categoryPopOver } }}\r\n                                >\r\n                                    {createCategoryList()}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12} md={12} lg={6}>\r\n                            <TextField\r\n                                label='Tamaño de la clase'\r\n                                fullWidth\r\n                                margin='none'\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                InputProps={{\r\n                                    inputComponent: SharedTextFieldTipTapEditor,\r\n                                    inputProps: {\r\n                                        ref: classSizeRef,\r\n                                        name: 'classSize',\r\n                                        placeholder: 'Tamaño de la clase',\r\n                                        initialvalue: classSize ?? 0,\r\n                                        type: \"number\",\r\n                                        min: 0,\r\n                                        onChange: handleChangeMetadataField,\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12} md={12} lg={6}>\r\n                            <div style={{ width: '100%' }}>\r\n                                <Typography > Tiempo de trabajo </Typography>\r\n                                <div className={classes.timeField}>\r\n                                    <TextField\r\n                                        label='Horas'\r\n                                        fullWidth\r\n                                        margin='none'\r\n                                        variant='outlined'\r\n                                        color='primary'\r\n                                        InputProps={{\r\n                                            inputComponent: SharedTextFieldTipTapEditor,\r\n                                            inputProps: {\r\n                                                ref: hoursRef,\r\n                                                name: 'workingTimeHours',\r\n                                                placeholder: 'Horas',\r\n                                                initialvalue: workingTimeHours,\r\n                                                type: \"number\",\r\n                                                min: 0,\r\n                                                onChange: handleChangeMetadataField,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                    <Typography style={{ marginLeft: 10, marginRight: 10 }}> : </Typography>\r\n                                    <TextField\r\n                                        label='Minutos'\r\n                                        fullWidth\r\n                                        margin='none'\r\n                                        variant='outlined'\r\n                                        color='primary'\r\n                                        InputProps={{\r\n                                            inputComponent: SharedTextFieldTipTapEditor,\r\n                                            inputProps: {\r\n                                                ref: minutesRef,\r\n                                                name: 'workingTimeMinutes',\r\n                                                placeholder: 'Minutos',\r\n                                                initialvalue: workingTimeMinutes,\r\n                                                type: \"number\",\r\n                                                min: 0,\r\n                                                max: 59,\r\n                                                onChange: handleChangeMetadataField,\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12} md={12} lg={6}>\r\n                            <div style={{ width: '100%' }}>\r\n                                <Typography > Tiempo diseñado </Typography>\r\n                                <div className={classes.timeField}>\r\n                                    <TextField\r\n                                        //margin=\"dense\"\r\n                                        variant=\"outlined\"\r\n                                        name=\"workingTimeDesignHours\"\r\n                                        value={workingTimeDesignHours}\r\n                                        label=\"Horas\"\r\n                                        type=\"number\"\r\n                                        disabled\r\n                                        fullWidth\r\n                                    />\r\n                                    <Typography style={{ marginLeft: 10, marginRight: 10 }}> : </Typography>\r\n                                    <TextField\r\n                                        //margin=\"dense\"\r\n                                        variant=\"outlined\"\r\n                                        name=\"workingTimeDesignMinutes\"\r\n                                        value={workingTimeDesignMinutes}\r\n                                        label=\"Minutos\"\r\n                                        type=\"number\"\r\n                                        disabled\r\n                                        fullWidth\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12}>\r\n                            <TextField\r\n                                label='Descripción'\r\n                                fullWidth\r\n                                margin='none'\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                InputProps={{\r\n                                    inputComponent: SharedTextFieldTipTapEditor,\r\n                                    inputProps: {\r\n                                        ref: descriptionRef,\r\n                                        name: 'description',\r\n                                        placeholder: 'Descripción',\r\n                                        initialvalue: description ?? '',\r\n                                        rowMax: 5,\r\n                                        onChange: handleChangeMetadataField,\r\n                                        multiline: true,\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12} md={12} lg={6}>\r\n                            <TextField\r\n                                label='Conocimiento previo'\r\n                                fullWidth\r\n                                margin='none'\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                InputProps={{\r\n                                    inputComponent: SharedTextFieldTipTapEditor,\r\n                                    inputProps: {\r\n                                        ref: priorKnowledgeRef,\r\n                                        name: 'priorKnowledge',\r\n                                        placeholder: 'Conocimiento previo',\r\n                                        initialvalue: priorKnowledge ?? '',\r\n                                        rowMax: 5,\r\n                                        onChange: handleChangeMetadataField,\r\n                                        multiline: true,\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className={classes.grid} xs={12} md={12} lg={6}>\r\n                            <TextField\r\n                                label='Objetivos'\r\n                                fullWidth\r\n                                margin='none'\r\n                                variant='outlined'\r\n                                color='primary'\r\n                                InputProps={{\r\n                                    inputComponent: SharedTextFieldTipTapEditor,\r\n                                    inputProps: {\r\n                                        ref: objectiveRef,\r\n                                        name: 'objective',\r\n                                        placeholder: 'Objetivos',\r\n                                        initialvalue: objective ?? '',\r\n                                        rowMax: 5,\r\n                                        onChange: handleChangeMetadataField,\r\n                                        multiline: true,\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <KeywordManager keywords={keywords} onChangeKeywords={handleChangeKeywords} />\r\n                    <div className={classes.title}>\r\n                        <Typography variant='h4'>Resultados de aprendizaje</Typography>\r\n                        <Button variant='outlined' color='default' onClick={handleOpenLearningResultmodal}>Agregar</Button>\r\n                    </div>\r\n                    <Divider />\r\n                    <div className={classes.content}>\r\n                        {\r\n                            metadata.results.length === 0\r\n                                ? <Alert severity=\"info\" style={{ width: '100%', display: 'flex', justifyContent: 'center' }}>\r\n                                    Este diseño aún no tiene resultados de aprendizaje. Agrega el primer resultado de aprendizaje haciendo click {' '}\r\n                                    {<Link className={classes.clickHere} onClick={handleOpenLearningResultmodal}>aquí</Link>}\r\n                                    !\r\n                                </Alert>\r\n                                : metadata.results.map((result, index) => (\r\n                                    <LearningResult key={`learning-result-${index}`} index={index} {...result} />\r\n                                ))\r\n\r\n                        }\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} md={3} lg={2} className={classes.rightPanel}></Grid>\r\n            </Grid>\r\n            <LearningResultModal design={design} isOpen={uiState.isLearningResultModalOpen} />\r\n        </>\r\n    )\r\n})\r\n","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\DesignWorkspace.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignReader\\DesignReader.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\Design.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\hooks\\useForm.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\ResourceLinksModal.js",["330","331","332","333","334","335","336"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, Divider, Fab, Grid, IconButton, ListItem, makeStyles, TextField, Tooltip, Typography } from '@material-ui/core';\r\nimport React, { useState } from 'react'\r\nimport types from 'types';\r\nimport { useUiState } from 'contexts/ui/UiContext';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { useDesignState } from 'contexts/design/DesignContext';\r\nimport { Add } from '@material-ui/icons';\r\nimport { ResourceLink } from './ResourceLink';\r\nimport { useSocketState } from 'contexts/SocketContext';\r\nimport { useSnackbar } from 'notistack';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    spaceInit:{\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },buttonZone: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        [theme.breakpoints.down('xs')]: {\r\n            flexWrap: 'wrap',\r\n        },\r\n    },resourceZone: {\r\n        height: 'auto',\r\n        [theme.breakpoints.up('xs')]: {\r\n            height: '90%',\r\n            overflow: 'auto',\r\n            overflowX: 'hidden',\r\n        },\r\n    },contentSpace:{\r\n        height: 'auto',\r\n        paddingBottom: theme.spacing(6),\r\n        [theme.breakpoints.up('xs')]: {\r\n            height: 'calc(100vh - 500px)',\r\n            overflow: 'auto'\r\n        },\r\n    }\r\n}));\r\n\r\nexport const ResourceLinksModal = () => {\r\n    const classes = useStyles();\r\n    const { uiState, dispatch } = useUiState();\r\n    const { learningActivityIndex, taskIndex } = uiState.resourceLink;\r\n    const { designState } = useDesignState();\r\n    const { design } = designState;\r\n    const [newResource, setNewResource] = useState([...design.data.learningActivities[learningActivityIndex].tasks[taskIndex].resourceLinks]);\r\n    const { socket } = useSocketState();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const handleClose = () => {\r\n        setNewResource([...design.data.learningActivities[learningActivityIndex].tasks[taskIndex].resourceLinks]);\r\n        dispatch({\r\n            type: types.ui.setResourceLink,\r\n            payload: {\r\n                learningActivityIndex: null,\r\n                taskIndex: null,\r\n            }\r\n        });\r\n        dispatch({\r\n            type: types.ui.toggleModal,\r\n            payload: 'Resource',\r\n        });\r\n    };\r\n    \r\n    const handleAddResource = () =>{\r\n        const newLinks = {\r\n            title: '',\r\n            link: '',\r\n        }\r\n        setNewResource([...newResource, newLinks]);\r\n    };\r\n\r\n    const handleAddResourceInDesign = () =>{\r\n        socket.emit('change-resource-in-task', { designId: design._id, learningActivityIndex, taskIndex, resources: [...newResource] });\r\n        dispatch({\r\n            type: types.ui.toggleModal,\r\n            payload: 'Resource'\r\n        });\r\n        enqueueSnackbar('Se ha agregado su recurso correctamente', { variant: 'success', autoHideDuration: 2000 });\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Dialog onClose={handleClose} open={uiState.isResourceModalOpen} fullWidth={true} maxWidth={'md'} >\r\n                <DialogTitle >\r\n                    Administrar Recursos\r\n                </DialogTitle>\r\n                <IconButton aria-label='close' className={classes.closeButton} onClick={handleClose}>\r\n                    <CloseIcon/>\r\n                </IconButton>\r\n                <DialogContent dividers >\r\n                    <Grid className={classes.contentSpace}>\r\n                        <div className={classes.buttonZone}>\r\n                            <Button variant={'outlined'} color = {'primary'} onClick = {handleAddResource}>Agregar recurso</Button>\r\n                        </div>\r\n                        <Box className={classes.resourceZone}>\r\n                            <Box >\r\n                            {\r\n                                newResource.map((resource, i) => <ResourceLink key={`resource-${i}-task-${taskIndex}-learningActivity-${learningActivityIndex}`} index={i} resource = {resource} newResource={newResource} setNewResource={setNewResource}/>)\r\n                            }\r\n                            </Box>\r\n                        </Box>\r\n                        \r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions >\r\n                    <Button onClick={handleClose}>\r\n                        Cancelar\r\n                    </Button>\r\n                    <Button variant='contained' color='primary' onClick={handleAddResourceInDesign}>\r\n                        Guardar recursos\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignReader\\LearningActivityReader.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\ShareModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\types\\design.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\types\\ui.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\hooks\\useHorizontalScroll.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\DesignSkeleton.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\DesignsFolder.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\PieGraphic.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\ResourceLink.js",["337"],"import { Box, Divider, Grid, IconButton, makeStyles, TextField, Tooltip, Typography } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { Delete } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    spaceResource:{\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n    tooltip: {\r\n        maxHeight: \"25px\",\r\n        minHeight: \"25px\",\r\n        minWidth: \"25px\",\r\n        maxWidth: \"25px\",\r\n    },\r\n    icon:{\r\n        maxHeight: \"25px\",\r\n        minHeight: \"25px\",\r\n        minWidth: \"25px\",\r\n        maxWidth: \"25px\",\r\n    },\r\n    resourceLinkGrid:{\r\n        display: 'grid',\r\n        gridTemplateColumns: '95% 5%',\r\n    },\r\n}));\r\n\r\nexport const ResourceLink = ({index, resource, newResource, setNewResource}) => {\r\n    const classes = useStyles();\r\n\r\n    const changeTitle = (event) => {\r\n        const newTitle = event.target.value;\r\n        setNewResource( newResource => newResource.map((resource, i) => {\r\n            if ( i === index ) {\r\n                resource.title = newTitle;\r\n            }\r\n            return resource;\r\n        }));\r\n    };\r\n\r\n    const changeLink = (event) => {\r\n        const newLink = event.target.value;\r\n        setNewResource( newResource => newResource.map((resource, i) => {\r\n            if ( i === index ) {\r\n                resource.link = newLink;\r\n            }\r\n            return resource;\r\n        }));\r\n    };\r\n    \r\n    const handleDeleteResourceLink = (index) =>{\r\n        if (index === newResource.length - 1) {\r\n            setNewResource([\r\n                ...newResource.slice(0, index),\r\n            ])\r\n        } else {\r\n            setNewResource([\r\n                ...newResource.slice(0, index),\r\n                ...newResource.slice(index + 1, newResource.length)\r\n            ])\r\n        };\r\n    };\r\n\r\n    const resourceLink = () =>{\r\n        return (\r\n            <div key={index} className={classes.spaceResource}>\r\n                <Grid >\r\n                    <div className={classes.resourceLinkGrid}>\r\n                        <div >\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='dense' \r\n                                name='title' \r\n                                value={ resource.title } \r\n                                onChange={ (e) => changeTitle(e) } \r\n                                label='Título' \r\n                                type='text' \r\n                                fullWidth \r\n                            />\r\n                            <TextField\r\n                                variant='outlined'\r\n                                margin='dense' \r\n                                name='link' \r\n                                value={ resource.link } \r\n                                onChange={ (e)=>changeLink(e)} \r\n                                label='Enlace' \r\n                                type='text' \r\n                                fullWidth \r\n                            />\r\n                        </div>\r\n                        <div>\r\n                        <Box display=\"flex\" flexDirection=\"row-reverse\">\r\n                                    <Box>\r\n                                        <Tooltip title=\"Eliminar recurso\" className= {classes.tooltip}>\r\n                                            <IconButton onClick={() => handleDeleteResourceLink(index)}>\r\n                                                <Delete className={classes.icon} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </Box>\r\n                                </Box>\r\n                        </div>\r\n                    </div>\r\n                <Divider style={{marginTop: 10}}/>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                resourceLink()\r\n            }\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\StackedBar.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\PDF\\ViewAndDownloadPDFModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\assets\\resource\\items.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\SharedTextFieldTipTapEditor.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\LearningActivity.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\utils\\timeFormatters.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\LearningResult.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\LearningResultModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\RightClickMenu.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\CustomMenu.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\PDF\\DocumentPDF.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPageReader\\DesignReader\\TaskReader.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Workspace\\Task.js",["338"],"import React, { forwardRef, useEffect, useImperativeHandle, useRef } from 'react';\r\nimport { IconButton, makeStyles, Typography, Tooltip, Paper, MenuItem, FormControl, Select, TextField, Box, InputLabel, useTheme, useMediaQuery, Fab, Button } from '@material-ui/core';\r\nimport { useSocketState } from 'contexts/SocketContext';\r\nimport { useForm } from 'hooks/useForm';\r\nimport { useDesignState } from 'contexts/design/DesignContext';\r\nimport { SharedTextFieldTipTapEditor } from 'components/SharedTextFieldTipTapEditor';\r\nimport { useUiState } from 'contexts/ui/UiContext';\r\nimport types from 'types';\r\nimport { useSnackbar } from 'notistack';\r\nimport { Delete } from '@material-ui/icons';\r\n//import ObjectID from 'bson-objectid';\r\n//import { ResourceLinks } from './ResourceLinks';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    trashIcon: {\r\n        display: 'flex',\r\n    },\r\n    tasksSpacing: {\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: '100%',\r\n        marginTop: theme.spacing(1),\r\n        background: theme.palette.background.workSpace\r\n    },\r\n    taskBody: {\r\n        padding: 10,\r\n        position: 'relative',\r\n        left: '5%',\r\n        width: '95%',\r\n        height: '100%',\r\n    },\r\n    taskSpacingDescription: {\r\n        marginLeft: theme.spacing(2),\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    taskSpacingDescriptionBD: {\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    colorLearningType: {\r\n        position: 'absolute',\r\n        width: '5%',\r\n        height: '100%',\r\n    },\r\n    timeField: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        marginRight: 10,\r\n        [theme.breakpoints.down('md')]: {\r\n            marginRight: 0,\r\n        },\r\n    },\r\n    grid: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    gridContainer: {\r\n        display: 'grid',\r\n        gridTemplateColumns: '50% 50%',\r\n        gridTemplateRows: 'auto',\r\n        gridTemplateAreas: `\r\n            'learningType modality'\r\n            'workingTime format'\r\n            'description description'`,\r\n        [theme.breakpoints.down('md')]: {\r\n            gridTemplateAreas: `\r\n                'learningType learningType'\r\n                'modality modality'\r\n                'format format'\r\n                'workingTime workingTime'\r\n                'description description'`,\r\n        },\r\n    },\r\n    firstRow: {\r\n        display: 'grid',\r\n        gridTemplateColumns: 'auto auto 10%',\r\n        gridTemplateRows: 'auto',\r\n        gridTemplateAreas: `'learningType modality'`,\r\n    },\r\n    learningTypeContainer:{\r\n        gridArea: 'learningType',\r\n        width: '100%',\r\n        display: 'flex',\r\n    },\r\n    learningType:{\r\n        marginRight: 10,\r\n        [theme.breakpoints.down('md')]: {\r\n            marginRight: 0,\r\n            marginTop: 10,\r\n        },\r\n    },\r\n    modality: {\r\n        gridArea: 'modality',\r\n        width: '100%',\r\n        display: 'flex',\r\n        [theme.breakpoints.down('md')]: {\r\n            marginTop: 10,\r\n        },\r\n    },\r\n    format: {\r\n        gridArea: 'format',\r\n        alignSelf: 'flex-end',\r\n        [theme.breakpoints.down('md')]: {\r\n            marginTop: 10,\r\n        },\r\n    },\r\n    delete: {\r\n        alignSelf: 'flex-start',\r\n        justifySelf: 'center',\r\n    },\r\n    resourceLinkGrid:{\r\n        display: 'grid',\r\n        gridTemplateColumns: '25% 75%',\r\n    },\r\n    fab: {\r\n        maxHeight: \"20px\",\r\n        minHeight: \"20px\",\r\n        minWidth: \"20px\",\r\n        maxWidth: \"20px\",\r\n    },\r\n    icon:{\r\n        maxHeight: \"15px\",\r\n        minHeight: \"15px\",\r\n        minWidth: \"15px\",\r\n        maxWidth: \"15px\",\r\n    }\r\n}));\r\n\r\nexport const Task = forwardRef(({ learningActivityIndex, index, task, learningActivityID, ...rest }, ref) => {\r\n    const classes = useStyles();\r\n    const { socket } = useSocketState();\r\n    const isMounted = useRef(true);\r\n    const hoursRef = useRef();\r\n    const minutesRef = useRef();\r\n    const descriptionRef = useRef();\r\n    const { designState } = useDesignState();\r\n    const { design } = designState;\r\n    const { dispatch } = useUiState();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const theme = useTheme();\r\n    const isMediumDevice = useMediaQuery(theme.breakpoints.down('md'));\r\n    //const resourceLinksRefs = useRef([]);\r\n\r\n    const [form, handleInputChange, , setValues] = useForm({\r\n        description: task.description,\r\n        learningType: task.learningType && task.learningType.trim() !== '' ? task.learningType : 'Seleccionar',\r\n        modality: task.modality && task.modality.trim() !== '' ? task.modality : 'Seleccionar',\r\n        format: task.format && task.format.trim() !== '' ? task.format : 'Seleccionar',\r\n        timeHours: task.duration.hours ?? 0,\r\n        timeMinutes: task.duration.minutes ?? 0,\r\n    });\r\n\r\n    useImperativeHandle(\r\n        ref,\r\n        () => ({\r\n            clearTexts: () => {\r\n                hoursRef?.current.clearText();\r\n                minutesRef?.current.clearText();\r\n                descriptionRef?.current.clearText();\r\n            }\r\n        }),\r\n    );\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            isMounted.current = false;\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.description !== task.description) {\r\n                setValues((prevState) => ({\r\n                    ...prevState,\r\n                    description: task.description,\r\n                }));\r\n            }\r\n        }\r\n    }, [form.description, task.description, setValues]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.learningType !== task.learningType) {\r\n                setValues((prevState) => ({\r\n                    ...prevState,\r\n                    learningType: task.learningType && task.learningType.trim() !== '' ? task.learningType : 'Seleccionar',\r\n                }));\r\n            }\r\n        }\r\n    }, [form.learningType, task.learningType, setValues]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.modality !== task.modality) {\r\n                setValues((prevState) => ({\r\n                    ...prevState,\r\n                    modality: task.modality && task.modality.trim() !== '' ? task.modality : 'Seleccionar',\r\n                }));\r\n            }\r\n        }\r\n    }, [form.modality, task.modality, setValues]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.format !== task.format) {\r\n                setValues((prevState) => ({\r\n                    ...prevState,\r\n                    format: task.format && task.format.trim() !== '' ? task.format : 'Seleccionar',\r\n                }));\r\n            }\r\n        }\r\n    }, [form.format, task.format, setValues]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.timeHours !== task.duration.hours) {\r\n                setValues((prevState) => ({\r\n                    ...prevState,\r\n                    timeHours: task.duration.hours ?? 0,\r\n                }));\r\n            }\r\n        }\r\n    }, [form.timeHours, task.duration.hours, setValues]);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            if (form.timeMinutes !== task.duration.minutes) {\r\n                setValues((prevState) => ({\r\n                    ...prevState,\r\n                    timeMinutes: task.duration.minutes ?? 0,\r\n                }));\r\n            }\r\n        }\r\n    }, [form.timeMinutes, task.duration.minutes, setValues]);\r\n\r\n    const { description, learningType, modality, format, timeHours, timeMinutes, } = form;\r\n\r\n    const handleEditTaskField = ({ target }) => {\r\n        let { name: field, value } = target;\r\n        let subfield = null;\r\n        if (field.includes('description')) field = 'description';\r\n        else if (field.includes('timeHours')) {\r\n            field = 'duration';\r\n            subfield = 'hours';\r\n            value = isNaN(value) ? 0 : value;\r\n        } else if (field.includes('timeMinutes')) {\r\n            field = 'duration';\r\n            subfield = 'minutes';\r\n            value = isNaN(value) ? 0 : value;\r\n        }\r\n        handleInputChange({ target });\r\n        socket.emit('edit-task-field', { designId: design._id, learningActivityID, taskID: task.id, field, value, subfield });\r\n    };\r\n\r\n    //const handleAddResource = () => {\r\n    //    const id = ObjectID().toString();\r\n    //    socket.emit('new-resource-link', { designId: design._id, learningActivityIndex, index, id});\r\n    //};\r\n\r\n    const handleOpenResourceModal = () => {\r\n        dispatch({\r\n            type: types.ui.setResourceLink,\r\n            payload: {\r\n                learningActivityIndex: learningActivityIndex,\r\n                taskIndex: index,\r\n            },\r\n        });\r\n        dispatch({\r\n            type: types.ui.toggleModal,\r\n            payload: 'Resource',\r\n        });\r\n    }\r\n\r\n    const handleDeleteTask = (index) => {\r\n        if (description === \"\" && learningType === 'Seleccionar' && modality === 'Seleccionar' && format === 'Seleccionar' && timeHours === 0 && timeMinutes === 0) {\r\n            hoursRef?.current?.clearText();\r\n            minutesRef?.current?.clearText();\r\n            descriptionRef?.current?.clearText();\r\n            socket.emit('delete-task', { designId: design._id, learningActivityID, taskID: task.id });\r\n            enqueueSnackbar('Su tarea se ha eliminado', { variant: 'success', autoHideDuration: 2000 });\r\n        } else {\r\n            dispatch({\r\n                type: types.ui.setConfirmData,\r\n                payload: {\r\n                    type: 'tarea',\r\n                    args: { designId: design._id, learningActivityID, taskID: task.id },\r\n                    actionMutation: null,\r\n                }\r\n            })\r\n            dispatch({\r\n                type: types.ui.toggleModal,\r\n                payload: 'Confirmation',\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleChangeDropdown = (e) => {\r\n        handleInputChange(e);\r\n        socket.emit('edit-task-field', { designId: design._id, learningActivityID, taskID: task.id, field: e.target.name, value: e.target.value, subfield: null });\r\n    };\r\n\r\n    const listTasksArray = () => {\r\n        return (\r\n            <Box key={index} style={{ height: '100%' }}>\r\n                <Paper square className={classes.tasksSpacing}>\r\n                    <Box style={{ display: 'flex', position: 'relative', height: '100%', width: '100%' }}>\r\n                        {(() => {\r\n                            if (task.learningType === 'Investigación') {\r\n                                return (\r\n                                    <Box className={classes.colorLearningType} style={{ backgroundColor: '#57A8E7' }}></Box>\r\n                                )\r\n                            } else if (task.learningType === 'Adquisición') {\r\n                                return (\r\n                                    <Box className={classes.colorLearningType} style={{ backgroundColor: '#E95D5D' }}></Box>\r\n                                )\r\n                            } else if (task.learningType === 'Producción') {\r\n                                return (\r\n                                    <Box className={classes.colorLearningType} style={{ backgroundColor: '#C8951F' }}></Box>\r\n                                )\r\n                            } else if (task.learningType === 'Discusión') {\r\n                                return (\r\n                                    <Box className={classes.colorLearningType} style={{ backgroundColor: '#087A4C' }}></Box>\r\n                                )\r\n                            } else if (task.learningType === 'Colaboración') {\r\n                                return (\r\n                                    <Box className={classes.colorLearningType} style={{ backgroundColor: '#DFDF3F' }}></Box>\r\n                                )\r\n                            } else if (task.learningType === 'Práctica') {\r\n                                return (\r\n                                    <Box className={classes.colorLearningType} style={{ backgroundColor: '#A75BCD' }}></Box>\r\n                                )\r\n                            }\r\n                        })()}\r\n                        <div className={classes.taskBody}>\r\n                            <div className={classes.gridContainer}>\r\n                                <div className={classes.learningTypeContainer}>\r\n                                    <FormControl fullWidth variant='outlined' className={classes.learningType}>\r\n                                        <InputLabel id={`learningType-task-${task.id}-learningActivity-${learningActivityID}`}>Aprendizaje</InputLabel>\r\n                                        <Select\r\n                                            labelId={`learningType-task-${task.id}-learningActivity-${learningActivityID}`}\r\n                                            label='Aprendizaje'\r\n                                            name='learningType'\r\n                                            value={learningType}\r\n                                            onChange={handleChangeDropdown}\r\n                                        >\r\n                                            <MenuItem value={'Seleccionar'}> Seleccionar </MenuItem>\r\n                                            <MenuItem value={'Investigación'}> Investigación </MenuItem>\r\n                                            <MenuItem value={'Adquisición'}> Adquisición </MenuItem>\r\n                                            <MenuItem value={'Producción'}> Producción </MenuItem>\r\n                                            <MenuItem value={'Discusión'}> Discusión </MenuItem>\r\n                                            <MenuItem value={'Colaboración'}> Colaboración </MenuItem>\r\n                                            <MenuItem value={'Práctica'}> Práctica </MenuItem>\r\n\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    {isMediumDevice && (<Tooltip title=\"Eliminar tarea\" className={classes.delete}>\r\n                                        <IconButton onClick={() => handleDeleteTask(index)}>\r\n                                            <Delete fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </Tooltip>)}\r\n                                </div>\r\n                                <div className={classes.modality}>\r\n                                    <FormControl fullWidth variant='outlined'>\r\n                                        <InputLabel id={`modality-task-${task.id}-learningActivity-${learningActivityID}`}> Modalidad </InputLabel>\r\n                                        <Select\r\n                                            labelId={`modality-task-${task.id}-learningActivity-${learningActivityID}`}\r\n                                            label='Aprendizaje'\r\n                                            name='modality'\r\n                                            value={modality}\r\n                                            onChange={handleChangeDropdown}\r\n                                        >\r\n                                            <MenuItem value={'Seleccionar'}> Seleccionar </MenuItem>\r\n                                            <MenuItem value={'Presencial-Asíncrono'}> Presencial-Asíncrono</MenuItem>\r\n                                            <MenuItem value={'Presencial-Síncrono'}> Presencial-Síncrono</MenuItem>\r\n                                            <MenuItem value={'Online-Asíncrono'}> Online-Asíncrono</MenuItem>\r\n                                            <MenuItem value={'Online-Síncrono'}> Online-Síncrono</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                    {!isMediumDevice && (<Tooltip title=\"Eliminar tarea\" className={classes.delete}>\r\n                                        <IconButton onClick={() => handleDeleteTask(index)}>\r\n                                            <Delete fontSize=\"small\" />\r\n                                        </IconButton>\r\n                                    </Tooltip>)}\r\n                                </div>\r\n                                <div style={{ width: '100%', gridArea: 'workingTime', marginTop: 3 }}>\r\n                                    <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom> Tiempo de trabajo </Typography>\r\n                                    <div className={classes.timeField}>\r\n                                        <TextField\r\n                                            label='Horas'\r\n                                            fullWidth\r\n                                            margin='none'\r\n                                            variant='outlined'\r\n                                            color='primary'\r\n                                            InputProps={{\r\n                                                inputComponent: SharedTextFieldTipTapEditor,\r\n                                                inputProps: {\r\n                                                    ref: hoursRef,\r\n                                                    name: `timeHours-task-${task.id}-learning-activity-${learningActivityID}`, // TODO: Cambiar y utilizar id generada en mongo como nombre de dato compartido.\r\n                                                    placeholder: 'Horas',\r\n                                                    initialvalue: timeHours,\r\n                                                    onChange: handleEditTaskField,\r\n                                                    type: 'number',\r\n                                                    min: 0,\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                        <Typography style={{ marginLeft: 10, marginRight: 10 }}> : </Typography>\r\n                                        <TextField\r\n                                            label='Minutos'\r\n                                            fullWidth\r\n                                            margin='none'\r\n                                            variant='outlined'\r\n                                            color='primary'\r\n                                            InputProps={{\r\n                                                inputComponent: SharedTextFieldTipTapEditor,\r\n                                                inputProps: {\r\n                                                    ref: minutesRef,\r\n                                                    name: `timeMinutes-task-${task.id}-learning-activity-${learningActivityID}`, // TODO: Cambiar y utilizar id generada en mongo como nombre de dato compartido.\r\n                                                    placeholder: 'Minutos',\r\n                                                    initialvalue: timeMinutes,\r\n                                                    onChange: handleEditTaskField,\r\n                                                    type: 'number',\r\n                                                    min: 0,\r\n                                                    max: 59,\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                <div style={{marginTop: 20}}>\r\n                                    <Button variant={'outlined'} onClick={handleOpenResourceModal}> Administrar recursos</Button>\r\n                                    {/*\r\n                                    <div className={classes.resourceLinkGrid}>\r\n                                        <Typography variant=\"body2\" color=\"textSecondary\" > Enlace de Recursos </Typography>\r\n                                        <Tooltip title='Agregar recurso' arrow>\r\n                                            <Fab aria-label='add-resource-link' className= {classes.fab} color='primary' onClick={handleAddResource} >\r\n                                                <Add className={classes.icon}/>\r\n                                            </Fab>\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                    {design.data.learningActivities[learningActivityIndex] && design.data.learningActivities[learningActivityIndex].tasks && design.data.learningActivities[learningActivityIndex].tasks[index].resourceLinks && design.data.learningActivities[learningActivityIndex].tasks[index].resourceLinks.map((resourceLink, i)=> <ResourceLinks ref={(ref) => resourceLinksRefs.current.push(ref)} key={`resourceLink-${i}-task-${index}-learningActivity-${learningActivityIndex}`} index={i} resourceLink={resourceLink} taskIndex={index} learningActivityIndex= {learningActivityIndex} /> ) \r\n                                    */}\r\n                                </div>\r\n                                <FormControl fullWidth={isMediumDevice} variant='outlined' className={classes.format}>\r\n                                    <InputLabel id={`format-task-${task.id}-learningActivity-${learningActivityID}`}> Formato </InputLabel>\r\n                                    <Select\r\n                                        labelId={`format-task-${task.id}-learningActivity-${learningActivityID}`}\r\n                                        label='Formato'\r\n                                        name='format'\r\n                                        value={format}\r\n                                        onChange={handleChangeDropdown}\r\n                                    >\r\n                                        <MenuItem value={'Seleccionar'}> Seleccionar </MenuItem>\r\n                                        <MenuItem value={'Grupal'}> Grupal</MenuItem>\r\n                                        <MenuItem value={'Individual'}> Individual</MenuItem>\r\n                                        <MenuItem value={'Toda la clase'}> Toda la clase</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                                <TextField\r\n                                    style={{ gridArea: 'description', marginTop: 10, }}\r\n                                    label='Descripción'\r\n                                    fullWidth\r\n                                    margin='none'\r\n                                    variant='outlined'\r\n                                    color='primary'\r\n                                    InputProps={{\r\n                                        inputComponent: SharedTextFieldTipTapEditor,\r\n                                        inputProps: {\r\n                                            ref: descriptionRef,\r\n                                            name: `description-task-${task.id}-learning-activity-${learningActivityID}`, // TODO: Cambiar y utilizar id generada en mongo como nombre de dato compartido.\r\n                                            placeholder: 'Descripción',\r\n                                            initialvalue: description,\r\n                                            onChange: handleEditTaskField,\r\n                                            multiline: true,\r\n                                        }\r\n                                    }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </Box>\r\n                </Paper>\r\n            </Box >\r\n        )\r\n    }\r\nreturn (\r\n    <>\r\n        {\r\n            listTasksArray()\r\n        }\r\n    </>\r\n)\r\n})\r\n","C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\BloomVerbList.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\DesignPage\\Metadata\\BloomPiramid.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\LandingPage\\RegisterModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\LandingPage\\LoginModal.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\components\\ModalFormWithImage.js",[],"C:\\Users\\ivant\\Documents\\Learning-Activity-Designer-App\\src\\pages\\Auth\\ResetPasswordPage.js",[],{"ruleId":"339","replacedBy":"340"},{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","severity":1,"message":"344","line":7,"column":8,"nodeType":"345","messageId":"346","endLine":7,"endColumn":21},{"ruleId":"343","severity":1,"message":"347","line":1,"column":74,"nodeType":"345","messageId":"346","endLine":1,"endColumn":81},{"ruleId":"343","severity":1,"message":"348","line":1,"column":83,"nodeType":"345","messageId":"346","endLine":1,"endColumn":86},{"ruleId":"343","severity":1,"message":"349","line":1,"column":106,"nodeType":"345","messageId":"346","endLine":1,"endColumn":114},{"ruleId":"343","severity":1,"message":"350","line":1,"column":128,"nodeType":"345","messageId":"346","endLine":1,"endColumn":137},{"ruleId":"343","severity":1,"message":"351","line":1,"column":139,"nodeType":"345","messageId":"346","endLine":1,"endColumn":146},{"ruleId":"343","severity":1,"message":"352","line":1,"column":148,"nodeType":"345","messageId":"346","endLine":1,"endColumn":158},{"ruleId":"343","severity":1,"message":"353","line":7,"column":10,"nodeType":"345","messageId":"346","endLine":7,"endColumn":13},{"ruleId":"343","severity":1,"message":"352","line":1,"column":74,"nodeType":"345","messageId":"346","endLine":1,"endColumn":84},{"ruleId":"343","severity":1,"message":"348","line":2,"column":146,"nodeType":"345","messageId":"346","endLine":2,"endColumn":149},"no-native-reassign",["354"],"no-negated-in-lhs",["355"],"no-unused-vars","'TimeFormatter' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'Fab' is defined but never used.","'ListItem' is defined but never used.","'TextField' is defined but never used.","'Tooltip' is defined but never used.","'Typography' is defined but never used.","'Add' is defined but never used.","no-global-assign","no-unsafe-negation"]